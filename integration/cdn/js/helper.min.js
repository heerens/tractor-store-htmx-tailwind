const teamColors={explore:{stroke:"#FF5A54",text:"#fff"},decide:{stroke:"#53FF90",text:"#000"},checkout:{stroke:"#FFDE54",text:"#000"},inspire:{stroke:"#F64DFF",text:"#fff"}},teams=["explore","decide","checkout","inspire"];function setBasicStyles(){const n=document.createElement("style");n.id="boundaries",n.innerHTML=`\n:root {\n  --boundary-display: none;\n}\nhtml.showBoundaries {\n  --boundary-display: block;\n}\n\n[data-boundary],\n[data-boundary-page] {\n  position: relative;\n}\n[data-boundary]::after,\n[data-boundary-page]::after {\n  content: attr(data-boundary);\n  position: absolute;\n  bottom: -1.4em;\n  right: 0.75rem;\n  padding: 0 0.5rem;\n  line-height: 1.5;\n  font-weight: bold;\n  pointer-events: none;\n  font-weight: 400;\n  font-style: normal;\n  border-radius: 0 0 0.5rem 0.5rem;\n  color: #fff;\n  background-color: #999;\n  display: var(--boundary-display);\n}\n[data-boundary-page]::after {\n  top: 250px;\n  left: 0rem;\n  bottom: auto;\n  right: auto;\n  transform: rotate(-90deg);\n  transform-origin: 0 0;\n  content: attr(data-boundary-page);\n}\n\n[data-boundary]::before {\n  inset: 0;\n  position: absolute;\n  content: "";\n  border: 4px solid #999;\n  border-radius: 1rem;\n  pointer-events: none;\n  display: var(--boundary-display);\n}\n[data-boundary-page]::before {\n  inset: -1rem 0 -2rem;\n  position: absolute;\n  content: "";\n  pointer-events: none;\n  border: 6px solid #999;\n  display: var(--boundary-display);\n}\n\n${teams.map((n=>`\n[data-boundary=${n}]::before,\n[data-boundary-page=${n}]::before {\n  border-color: ${teamColors[n].stroke};\n}\n[data-boundary=${n}]::after,\n[data-boundary-page=${n}]::after {\n  background-color: ${teamColors[n].stroke};\n  color: ${teamColors[n].text};\n}\n`)).join("")}\n\n`,document.head.appendChild(n)}function toggleBoundaries(n){document.documentElement.classList.toggle("showBoundaries",n),window.localStorage.setItem("showBoundaries",n)}function showToggleButton(){const n="true"===window.localStorage.getItem("showBoundaries");toggleBoundaries(n);const o=document.createElement("input");o.type="checkbox",o.checked=n,o.addEventListener("change",(n=>toggleBoundaries(n.target.checked)));const e=document.createElement("div");e.classList.add("toggleView");const t=document.createElement("label");t.appendChild(o),t.appendChild(e),t.appendChild(document.createTextNode(" show team boundaries"));const a=document.createElement("div");a.classList.add("showBoundariesToggle");const r=document.createElement("style");r.innerHTML='\n    .showBoundariesToggle {\n      position: fixed; \n      bottom: 10px; \n      left: 10px; \n      border-radius: 10px;\n      display: flex;\n      background-color: rgba(255, 255, 255, 0.8); \n      -webkit-user-select: none; \n      user-select: none;\n      box-shadow: 0 0 20px 10px rgba(235, 91, 89, 0.05);  \n      border: 1px solid #eeebe2;\n      backdrop-filter: blur(5px);\n      -webkit-backdrop-filter: blur(5px);\n      margin-right: 10px;\n    }\n\n    .showBoundariesToggle input {\n      display: none;\n    }\n\n    .showBoundariesToggle label {\n      cursor: pointer;\n      padding: 20px; \n      display: flex;\n    }\n\n    .toggleView {\n      position: relative;\n      display: inline-block;\n      width: 40px;\n      height: 20px;\n      border: 1px solid #ccc;\n      border-radius: 10px;\n      margin-right: 10px;\n      box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.1);\n      background-color: #fff;\n      flex-shrink: 0;\n    }\n\n    .toggleView::before {\n      content: "";\n      display: block;\n      width: 18px;\n      height: 18px;\n      border-radius: 10px;\n      background-color: #fff;\n      box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);\n      transition: transform 0.3s, width 0.3s;\n    }\n\n    .toggleView::after {\n      top: 1px;\n      left: 1px;\n      position: absolute;\n      content: "";\n      display: block;\n      width: 16px;\n      height: 16px;\n      border-radius: 10px;\n      background-color: #000;\n      opacity: 0.5;\n      transition: transform 0.3s;\n    }\n\n    .showBoundariesToggle label:hover .toggleView::after {\n      opacity: 1;\n    }\n\n    .showBoundariesToggle input:checked + .toggleView::before {\n      width: 38px;\n      box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.1);\n      background-color: rgba(255, 90, 85, 1);\n    }\n\n    .showBoundariesToggle input:checked + .toggleView::after {\n      transform: translateX(20px);\n      opacity: 1;\n      box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);\n    }\n  ',a.appendChild(r),a.appendChild(t),document.body.appendChild(a)}function copyStylesToShadow(n){const o=document.getElementById("boundaries");o&&n&&null===n.getElementById("boundaries")&&n.appendChild(o.cloneNode(!0))}function handleExistingShadowRoots(){document.querySelectorAll("*").forEach((n=>{n.shadowRoot&&copyStylesToShadow(n.shadowRoot)}))}function watchForShadowRoots(){new MutationObserver((n=>{n.forEach((n=>{n.addedNodes.forEach((n=>{n.shadowRoot&&copyStylesToShadow(n.shadowRoot),n.querySelectorAll&&n.querySelectorAll("*").forEach((n=>{n.shadowRoot&&copyStylesToShadow(n.shadowRoot)}))}))}))})).observe(document.documentElement,{childList:!0,subtree:!0})}setBasicStyles(),showToggleButton(),handleExistingShadowRoots(),watchForShadowRoots();